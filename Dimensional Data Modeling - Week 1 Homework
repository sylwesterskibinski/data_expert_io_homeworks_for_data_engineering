'''CREATE TYPE films AS(
	film TEXT,
	votes INTEGER,
	rating REAL,
	filmid TEXT
)'''

"""CREATE TYPE quality_class AS ENUM ('star','good','average','bad')"""

'''CREATE TABLE actors (
	actor TEXT,
	actor_id TEXT,
	films films,
	quality_class quality_class,
	year INTEGER,
	is_active BOOLEAN
	
)'''

'''SELECT MIN(year) FROM actor_films'''

INSERT INTO actors
WITH yesterday AS (
	SELECT *
	FROM actors
	WHERE year = 1971
),
	today AS (
	SELECT 
	actor, 
	actorid,
	ARRAY_AGG(ROW(
		film,
		votes,
		rating,
		filmid
	)::films) AS films,
	AVG(rating) AS rating,
	year,
	CASE WHEN year IS NOT NULL THEN TRUE ELSE FALSE END AS is_active
	FROM actor_films
	WHERE year = 1972
	GROUP BY 
	actor, 
	actorid,
	year,
	is_active
	)

	SELECT 
	COALESCE(t.actor,y.actor) AS actor,
	COALESCE(t.actorid,y.actorid) AS actorid,
	CASE 
		WHEN y.films IS NULL THEN t.films
		WHEN y.films IS NOT NULL THEN y.films || t.films
		ELSE y.films
	END AS films,
	CASE 
        WHEN t.year IS NOT NULL THEN
            CASE 
                WHEN t.rating > 8 THEN 'star'
                WHEN t.rating > 7 THEN 'good'
                WHEN t.rating > 6 THEN 'average'
                WHEN t.rating <= 6 THEN 'bad' 
            ELSE y.quality_class 
            END
        ELSE y.quality_class
    END::quality_class AS quality_class,
	COALESCE(t.year,y.year+1) AS year,
	CASE WHEN t.year IS NOT NULL THEN TRUE ELSE FALSE END AS is_active

	FROM today t
	FULL OUTER JOIN yesterday y
	ON t.actor = y.actor
